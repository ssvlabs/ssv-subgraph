type BApp @entity(immutable: false) {
  id: Bytes! # address
  bAppTokens: [BAppToken!]! @derivedFrom(field: "bApp")
  metadataURI: String
  strategies: [StrategyBAppOptIn!]! @derivedFrom(field: "bApp")
}

type BAppToken @entity(immutable: false) {
  id: String! # Set to `bApp.id.concat(token.id);`
  bApp: BApp!
  token: Bytes!
  sharedRiskLevel: BigInt!
  totalObligatedBalance: BigInt!
}

type Strategy @entity(immutable: false) {
  id: String! # uint256
  strategyId: BigInt! # uint256
  metadataURI: String
  owner: Account! # address
  fee: BigInt! # uint256
  feeProposed: BigInt! # uint256
  feeProposedTimestamp: BigInt! # uint256
  bApps: [StrategyBAppOptIn!]! @derivedFrom(field: "strategy")
  deposits: [StrategyUserBalance!]! @derivedFrom(field: "strategy")
  balances: [StrategyTokenBalance!]! @derivedFrom(field: "strategy")
}

type StrategyBAppOptIn @entity(immutable: false) {
  id: String! # Set to `strategy.id.concat(bApp.id)`
  strategy: Strategy!
  bApp: BApp!
  obligations: [Obligation!]! @derivedFrom(field: "strategyBAppOptIn")
}

type Obligation @entity(immutable: false) {
  id: String! # Set to `StrategyBAppOptIn.id.concat(token.id)`
  token: Bytes! # address
  obligatedBalance: BigInt!
  percentage: BigInt!
  percentageProposed: BigInt!
  percentageProposedTimestamp: BigInt! # uint256
  strategyBAppOptIn: StrategyBAppOptIn!
}

type StrategyUserBalance @entity(immutable: false) {
  id: String! # Set to `strategy.id.concat(account.id.concat(token.id))`
  contributor: Account!
  strategy: Strategy!
  token: Bytes! # address
  depositAmount: BigInt!
  proposedWithdrawal: BigInt!
  proposedWithdrawalTimestamp: BigInt!
}

type StrategyTokenBalance @entity(immutable: false) {
  id: String! # Set to `strategy.id.concat(token.id))`
  strategy: Strategy!
  token: Bytes! # address
  balance: BigInt!
  riskValue: BigInt!
}

type Account @entity(immutable: false) {
  id: Bytes! # address
  # DVT stuff ðŸ”¥
  nonce: BigInt!
  validatorCount: BigInt! # uint256
  clusters: [Cluster!] @derivedFrom(field: "owner")
  validators: [Validator!] @derivedFrom(field: "owner")
  operators: [Operator!] @derivedFrom(field: "owner")
  feeRecipient: Bytes! #address
  # BApp stuff ðŸ˜Ž
  metadataURI: String
  strategies: [Strategy!]! @derivedFrom(field: "owner")
  totalDelegatedPercentage: BigInt! # uint256
  delegators: [Delegation!]! @derivedFrom(field: "receiver")
  receivers: [Delegation!]! @derivedFrom(field: "delegator")
  deposits: [StrategyUserBalance!]! @derivedFrom(field: "contributor")
}

type BAppConstants @entity(immutable: false) {
  id: Bytes! # address
  _feeExpireTime: BigInt!
  _feeTimelockPeriod: BigInt!
  _obligationExpireTime: BigInt!
  _obligationTimelockPeriod: BigInt!
  _strategyMaxFeeIncrement: BigInt!
  _strategyMaxShares: BigInt!
  _withdrawalExpireTime: BigInt!
  _withdrawalTimelockPeriod: BigInt!
  totalAccounts: BigInt!
  totalBApps: BigInt!
  totalStrategies: BigInt!
}

type Delegation @entity(immutable: false) {
  id: String! # Set to `account.id.concat(account.id)` (delegator => receiver)
  delegator: Account!
  receiver: Account!
  percentage: BigInt!
}

type FeeExpireTimeUpdated @entity(immutable: true) {
  id: Bytes!
  feeExpireTime: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTimelockPeriodUpdated @entity(immutable: true) {
  id: Bytes!
  feeTimelockPeriod: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationExpireTimeUpdated @entity(immutable: true) {
  id: Bytes!
  obligationExpireTime: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationTimelockPeriodUpdated @entity(immutable: true) {
  id: Bytes!
  obligationTimelockPeriod: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyMaxFeeIncrementUpdated @entity(immutable: true) {
  id: Bytes!
  strategyMaxFeeIncrement: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyMaxSharesUpdated @entity(immutable: true) {
  id: Bytes!
  strategyMaxShares: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalTimelockPeriodUpdated @entity(immutable: true) {
  id: Bytes!
  withdrawalTimelockPeriod: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalExpireTimeUpdated @entity(immutable: true) {
  id: Bytes!
  withdrawalExpireTime: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppMetadataURIUpdated @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  metadataURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppOptedInByStrategy @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  data: Bytes! # bytes
  tokens: [Bytes!]! # address[]
  obligationPercentages: [BigInt!]! # uint32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppRegistered @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  tokens: [Bytes!]! # address[]
  sharedRiskLevel: [BigInt!]! # uint32[]
  metadataURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppTokensCreated @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  tokens: [Bytes!]! # address[]
  sharedRiskLevels: [BigInt!]! # uint32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppTokensRemoved @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  tokens: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppTokensUpdated @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  tokens: [Bytes!]! # address[]
  sharedRiskLevels: [BigInt!]! # uint32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegationCreated @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  receiver: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegationRemoved @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegationUpdated @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  receiver: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxFeeIncrementSet @entity(immutable: true) {
  id: Bytes!
  newMaxFeeIncrement: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationCreated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  token: Bytes! # address
  obligationPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationUpdateProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  token: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationUpdated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  token: Bytes! # address
  percentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SlashingFundWithdrawn @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyCreated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  fee: BigInt! # uint32
  metadataURI: String
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyDeposit @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  contributor: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyFeeUpdateProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  proposedFee: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyFeeUpdated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  fee: BigInt! # uint32
  isFast: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategySlashed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bAppAddress: Bytes! # address
  token: Bytes! # address
  percentage: BigInt!
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyWithdrawal @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  contributor: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  isFast: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyWithdrawalProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyMetadataURIUpdated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint32
  metadataURI: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AccountMetadataURIUpdated @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  metadataURI: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Cluster @entity(immutable: false) {
  id: String! # concat owner + operatorIds ?
  owner: Account! # address
  operatorIds: [BigInt!]! # uint64[]
  validatorCount: BigInt! # uint32
  validators: [Validator!] @derivedFrom(field: "cluster")
  networkFeeIndex: BigInt! # uint64
  index: BigInt! # uint64
  active: Boolean! # bool
  balance: BigInt! # uint256
  lastUpdateBlockNumber: BigInt! # uint256
  lastUpdateBlockTimestamp: BigInt!
  lastUpdateTransactionHash: Bytes!
}

type Validator @entity(immutable: false) {
  id: Bytes! #publicKey
  owner: Account! # address
  operators: [Operator!]! # uint64[]
  cluster: Cluster!
  removed: Boolean! # bool
  # publicKey: Bytes! # bytes
  shares: Bytes! # bytes
  lastUpdateBlockNumber: BigInt! # uint256
  lastUpdateBlockTimestamp: BigInt!
  lastUpdateTransactionHash: Bytes!
}

type Operator @entity(immutable: false) {
  id: String! # uint256
  operatorId: BigInt!
  owner: Account! # address
  publicKey: Bytes! # bytes
  removed: Boolean! # bool
  fee: BigInt! # uint256
  feeIndex: BigInt! # uint256
  feeIndexBlockNumber: BigInt! # uint256
  declaredFee: BigInt! # uint256
  whitelisted: [Account!]!
  whitelistedContract: Bytes! #address
  isPrivate: Boolean! # bool
  totalWithdrawn: BigInt! # uint256
  lastUpdateBlockNumber: BigInt! # uint256
  lastUpdateBlockTimestamp: BigInt!
  lastUpdateTransactionHash: Bytes!
  validatorCount: BigInt! # uint256
  validators: [Validator!] @derivedFrom(field: "operators")
}

# type Account @entity(immutable: false) {
#   id: Bytes! # address
#   nonce: BigInt!
#   validatorCount: BigInt! # uint256
#   clusters: [Cluster!] @derivedFrom(field: "owner")
#   validators: [Validator!] @derivedFrom(field: "owner")
#   operators: [Operator!] @derivedFrom(field: "owner")
#   feeRecipient: Bytes! #address
# }

type DAOValues @entity(immutable: false) {
  id: Bytes!
  networkFee: BigInt! # uint256
  networkFeeIndex: BigInt! # uint256
  networkFeeIndexBlockNumber: BigInt! # uint256
  liquidationThreshold: BigInt! # uint256
  minimumLiquidationCollateral: BigInt! # uint256
  operatorFeeIncreaseLimit: BigInt! # uint256
  declareOperatorFeePeriod: BigInt! # uint256
  executeOperatorFeePeriod: BigInt! # uint256
  operatorMaximumFee: BigInt! # uint256
  validatorsPerOperatorLimit: BigInt!
  updateType: DAOUpdateTypes!
  totalAccounts: BigInt!
  totalValidators: BigInt!
  totalOperators: BigInt!
  validatorsAdded: BigInt!
  validatorsRemoved: BigInt!
  operatorsAdded: BigInt!
  operatorsRemoved: BigInt!
  lastUpdateBlockNumber: BigInt! # uint256
  lastUpdateBlockTimestamp: BigInt! # uint256
  lastUpdateTransactionHash: Bytes! # uint256
}

enum DAOUpdateTypes {
  INITIALIZATION
  NETWORK_FEE
  LIQUIDATION_THRESHOLD
  MIN_LIQUIDATION_COLLATERAL
  OPERATOR_FEE_INCREASE_LIMIT
  DECLARE_OPERATOR_FEE_PERIOD
  EXECUTE_OPERATOR_FEE_PERIOD
  OPERATOR_MAX_FEE
  VALIDATOR_ADDED
  VALIDATOR_REMOVED
  OPERATOR_ADDED
  OPERATOR_REMOVED
}

type ClusterDeposited @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  value: BigInt! # uint256
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClusterLiquidated @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClusterReactivated @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClusterWithdrawn @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  value: BigInt! # uint256
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DeclareOperatorFeePeriodUpdated @entity(immutable: true) {
  id: String!
  value: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecuteOperatorFeePeriodUpdated @entity(immutable: true) {
  id: String!
  value: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeRecipientAddressUpdated @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  recipientAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LiquidationThresholdPeriodUpdated @entity(immutable: true) {
  id: String!
  value: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinimumLiquidationCollateralUpdated @entity(immutable: true) {
  id: String!
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NetworkEarningsWithdrawn @entity(immutable: true) {
  id: String!
  value: BigInt! # uint256
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NetworkFeeUpdated @entity(immutable: true) {
  id: String!
  oldFee: BigInt! # uint256
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorAdded @entity(immutable: true) {
  id: String!
  operatorId: BigInt! # uint64
  owner: Bytes! # address
  publicKey: Bytes! # bytes
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorFeeDeclarationCancelled @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorId: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorFeeDeclared @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorId: BigInt! # uint64
  blockNumber: BigInt! # uint256
  fee: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorFeeExecuted @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorId: BigInt! # uint64
  blockNumber: BigInt! # uint256
  fee: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorFeeIncreaseLimitUpdated @entity(immutable: true) {
  id: String!
  value: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorMaximumFeeUpdated @entity(immutable: true) {
  id: String!
  maxFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorRemoved @entity(immutable: true) {
  id: String!
  operatorId: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorWhitelistUpdated @entity(immutable: true) {
  id: String!
  operatorId: BigInt! # uint64
  whitelisted: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorMultipleWhitelistUpdated @entity(immutable: true) {
  id: String!
  operatorIds: [BigInt!]! # uint64[]
  whitelistAddresses: [Bytes!] # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorMultipleWhitelistRemoved @entity(immutable: true) {
  id: String!
  operatorIds: [BigInt!]! # uint64[]
  whitelistAddresses: [Bytes!] # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorWhitelistingContractUpdated @entity(immutable: true) {
  id: String!
  operatorIds: [BigInt!]! # uint64[]
  whitelistingContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorPrivacyStatusUpdated @entity(immutable: true) {
  id: String!
  operatorIds: [BigInt!]! # uint64[]
  toPrivate: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorWithdrawn @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorId: BigInt! # uint64
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ValidatorAdded @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  publicKey: Bytes! # bytes
  shares: Bytes! # bytes
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ValidatorRemoved @entity(immutable: true) {
  id: String!
  owner: Bytes! # address
  operatorIds: [BigInt!]! # uint64[]
  publicKey: Bytes! # bytes
  cluster_validatorCount: BigInt! # uint32
  cluster_networkFeeIndex: BigInt! # uint64
  cluster_index: BigInt! # uint64
  cluster_active: Boolean! # bool
  cluster_balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
